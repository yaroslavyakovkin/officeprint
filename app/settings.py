import re
import webbrowser
from RandomWordGenerator import RandomWord as rw
import tkinter as tk
from tkinter import ttk, messagebox
from database.sql import edit_defaults, get_defaults


def settings():
    def confirm_settings():
        token_value = token_entry.get()
        admin_id_value = admin_id_entry.get()
        secret_word_value = secret_word_entry.get()

        if not token_value or not is_valid_token(token_value):
            messagebox.showerror("–û—à–∏–±–∫–∞", 
                                 "–ü–æ–ª–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.")
            return
        elif get_defaults('TOKEN') is not None and get_defaults('TOKEN') != token_value: 
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", '–ö–∞–∂–µ—Ç—Å—è –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.\
            \n–ù–∞–∂–º–∏—Ç–µ "–í—ã—Ö–æ–¥" –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é –∏–∫–æ–Ω–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞.')

        if not token_value or not admin_id_value or not secret_word_value:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                 "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.")
            return
        
        edit_defaults('TOKEN', token_value)
        edit_defaults('ADMIN', admin_id_value)
        edit_defaults('KEY', secret_word_value)

        settings_window.destroy()
        settings_window.quit()

    def cancel_settings():
        settings_window.destroy()
        settings_window.quit()

    def validate_input(char):
        return char.isdigit() or char == ''
    
    def is_valid_token(token):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
        if not token.startswith(""):
            return False

        parts = token.split(":")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ":" –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ ":"
        return len(parts) == 2 and parts[0].isdigit() and len(parts[1]) > 0
    
    def hiden():
        if show_hiden_var.get():
            token_entry.config(show="")
            secret_word_entry.config(show="")
        else:
            token_entry.config(show="\u2022")
            secret_word_entry.config(show="\u2022")

    def randomword(event):
        secret_word_entry.delete(0, tk.END)
        secret_word_entry.insert(0, rw(5).generate())

    def github(event):
        webbrowser.open('https://github.com/yaroslavyakovkin')

    def botfather(event):
        webbrowser.open('https://t.me/BotFather')

    def getmyid(event):
        webbrowser.open('https://t.me/getmyid_bot')

    def infohelp(event):
        messagebox.showinfo("–ü–æ–º–æ—â—å",
'–¢–æ–∫–µ–Ω:\
\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–æ—Ç–æ–º @BotFather. \
–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Ç–æ–∫–µ–Ω –≤ –ø–æ–ª–µ "–¢–æ–∫–µ–Ω". \
–û—Å—Ç–∞–ª—å–Ω–æ–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥, –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ —Å–≤–æ—ë —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n\
\n–ê–¥–º–∏–Ω:\
\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID, –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º @getmyid_bot. \
–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º, \
—É–∑–Ω–∞–π—Ç–µ –∏ –≤–ø–∏—à–∏—Ç–µ –µ–≥–æ ID –≤ –ø–æ–ª–µ "–ê–¥–º–∏–Ω"\n\
\n–ö–ª—é—á:\
\n–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ª—é–±–æ–π –∫—Ç–æ –∑–Ω–∞–µ—Ç —ç—Ç–æ—Ç –∫–ª—é—á, \
–º–æ–∂–µ—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –Ω–µ –æ–∂–∏–¥–∞—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞.\n\
\n–í—Å–µ —É–ø–æ–º—è–Ω—É—Ç—ã–µ –±–æ—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ç–µ–∫—Å—Ç "–¢–æ–∫–µ–Ω" –∏ "–ê–¥–º–∏–Ω" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. \
–ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ "–ö–ª—é—á", —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.\n\
\n–ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π —Ç–æ –ø—Ä–∏—á–∏–Ω–µ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ \
–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞ @yrkdaysnf')

    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    default_token = get_defaults('TOKEN')
    default_admin = get_defaults('ADMIN')
    default_key = get_defaults('KEY')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ None –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    default_token = '' if default_token is None else default_token
    default_admin = '' if default_admin is None else default_admin
    default_key = '' if default_key is None else default_key

    # –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
    settings_window = tk.Tk()
    settings_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")

    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ –ø–∞—Ä–æ–ª—è
    show_hiden_var = tk.IntVar()

    # –ö–æ–ø–∏—Ä–∞–π—Ç
    author = tk.Label(settings_window, 
                    text='¬© Y.V.Yakovkin, Office Printer, 2024', 
                    cursor="heart",
                    foreground="gray")
    author.grid(row=0, column=0, padx=5, sticky="sw", columnspan=3)
    author.bind("<Button-2>", github)

    # –ò–Ω—Ñ–æ
    info = tk.Label(settings_window, text='üõà –ü–æ–º–æ—â—å', cursor="question_arrow")
    info.grid(row=0, column=3, padx=5, sticky="se")
    info.bind("<Button-1>", infohelp)

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    token_label = tk.Label(settings_window, text="–¢–æ–∫–µ–Ω:", cursor="star")
    token_label.grid(row=1, column=0, pady=5, padx= 5, sticky="sw")
    token_entry = ttk.Entry(settings_window, show="\u2022", width = 55)
    token_entry.grid(row=1, column=1, pady=5, columnspan=3, padx=(0,5), sticky='nsew')
    token_entry.insert(0, default_token)
    token_label.bind("<Button-1>", botfather)

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è ID –∞–¥–º–∏–Ω–∞
    admin_id_label = tk.Label(settings_window, text="–ê–¥–º–∏–Ω:", cursor="star")
    admin_id_label.grid(row=2, column=0, pady=5, padx=5, sticky="sw")
    admin_id_entry = ttk.Entry(settings_window, 
                               validate="key", 
                               validatecommand=(settings_window.register(validate_input), '%S'),
                               width=20)
    admin_id_entry.grid(row=2, column=1, pady=5, sticky='nsew')
    admin_id_entry.insert(0, default_admin)
    admin_id_label.bind("<Button-1>", getmyid)

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    secret_word_label = tk.Label(settings_window, text="–ö–ª—é—á:", cursor="pencil")
    secret_word_label.grid(row=2, column=2, pady=5, padx=5, sticky="se")
    secret_word_entry = ttk.Entry(settings_window, show="\u2022", width=20)
    secret_word_entry.grid(row=2, column=3, pady=5, padx=(0,5), sticky='nsew')
    secret_word_entry.insert(0, default_key)
    secret_word_label.bind("<Button-1>", randomword)

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    cancel_button = ttk.Button(settings_window, text="–û—Ç–º–µ–Ω–∏—Ç—å", command=cancel_settings)
    cancel_button.grid(row=3, column=0, columnspan=2, pady=5, padx=5, sticky="w")

    # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –ø–∞—Ä–æ–ª—è
    show_password_checkbox = tk.Checkbutton(settings_window, 
                                            text="–ü–æ–∫–∞–∑–∞—Ç—å —Å–∫—Ä—ã—Ç–æ–µ", 
                                            variable=show_hiden_var, 
                                            command=hiden)
    show_password_checkbox.grid(row=3, column=0, columnspan=4)

    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_button = ttk.Button(settings_window, text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", command=confirm_settings)
    confirm_button.grid(row=3, column=2, columnspan=2, pady=5, padx=5, sticky="e")

    settings_window.attributes('-topmost', True)
    settings_window.eval('tk::PlaceWindow . center')
    settings_window.iconbitmap('assets\\alpha.ico')
    windowsize = re.findall(r'\d+', settings_window.geometry())
    w = windowsize[0]
    h = windowsize[1]
    settings_window.maxsize(w,h)
    settings_window.minsize(w,h)
    settings_window.mainloop()